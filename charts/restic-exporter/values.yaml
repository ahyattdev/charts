controllers:
  main:
    # -- enable the controller.
    enabled: true
    # -- Set annotations on the deployment/statefulset/daemonset/cronjob/job
    annotations: { }
    # -- Set labels on the deployment/statefulset/daemonset/cronjob/job
    labels: { }

    containers:
      main:
        image:
          # -- image repository
          repository: docker.io/ngosang/restic-exporter
          # -- image tag
          tag: "1.6.0"
          # -- image pull policy
          pullPolicy: IfNotPresent

        # -- Environment variables. Template enabled.
        # Syntax options:
        # A) TZ: UTC
        # B) PASSWD: '{{ .Release.Name }}'
        # B) TZ:
        #      value: UTC
        #      dependsOn: otherVar
        # D) PASSWD:
        #      configMapKeyRef:
        #        name: config-map-name
        #        key: key-name
        # E) PASSWD:
        #      dependsOn:
        #        - otherVar1
        #        - otherVar2
        #      valueFrom:
        #        secretKeyRef:
        #          name: secret-name
        #          key: key-name
        #      ...
        # F) - name: TZ
        #      value: UTC
        # G) - name: TZ
        #      value: '{{ .Release.Name }}'
        env:
          - name: RESTIC_REPOSITORY
            value: b2:bucketname:path/to/repo
#          - name: RESTIC_PASSWORD
#            valueFrom:
#              secretKeyRef:
#                name: restic-secrets
#                key: restic-password
#          - name: B2_ACCOUNT_ID
#            valueFrom:
#              secretKeyRef:
#                name: restic-secrets
#                key: b2-account-id
#          - name: B2_ACCOUNT_KEY
#            valueFrom:
#              secretKeyRef:
#                name: restic-secrets
#                key: b2-account-key
#          - name: AWS_ACCESS_KEY_ID
#            valueFrom:
#              secretKeyRef:
#                name: restic-secrets
#                key: aws-access-key-id
#          - name: AWS_SECRET_ACCESS_KEY
#            valueFrom:
#              secretKeyRef:
#                name: restic-secrets
#                key: aws-access-key-secret

        # -- Probe configuration
        # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
        probes:
          # -- Liveness probe configuration
          # @default -- See below
          liveness:
            enabled: false

          # -- Readiness probe configuration
          readiness:
            enabled: false

          # -- Startup probe configuration
          startup:
            enabled: false

        # -- Set the resource requests / limits for the container.
        resources:
          { }
          ## We usually recommend not to specify default resources and to leave this as a conscious
          ## choice for the user. This also increases chances charts run on environments with little
          ## resources, such as Minikube. If you do want to specify resources, uncomment the following
          ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
        #   memory: 128Mi

        # -- Configure the Security Context for the container
        securityContext: { }

        # -- Configure the lifecycle event hooks for the container
        # -- [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/)]
        lifecycle: { }

        # -- Configure the path at which the file to which the containers termination message will be written.
        # -- [[ref](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle-1)]
        terminationMessagePath:

        # -- Indicate how the containers termination message should be populated.
        # Valid options are `File` and `FallbackToLogsOnError`.
        # -- [[ref](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle-1)]
        terminationMessagePolicy:

    # -- Specify any initContainers here as dictionary items.
    # Each initContainer should have its own key
    initContainers: { }
service:
  main:
    # -- Enables or disables the service
    enabled: true

    # -- Override the name suffix that is used for this service
    nameOverride: ""

    # -- Configure which controller this service should target
    controller: main

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: true

    # -- Set the service type
    type: ClusterIP

    # -- Specify the internalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/)]
    internalTrafficPolicy:

    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    externalTrafficPolicy:

    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
    # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: [ ]

    # -- Provide additional annotations which may be required.
    annotations: { }

    # -- Provide additional labels which may be required.
    labels: { }

    # -- Allow adding additional match labels
    extraSelectorLabels: { }
    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 8001

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP

        # -- Specify a service targetPort if you wish to differ the service port from the application port.
        # If `targetPort` is specified, this port number is used in the container definition instead of
        # the `port` value. Therefore named ports are not supported for this field.
        #targetPort:

        # -- Specify the nodePort value for the LoadBalancer and NodePort service types.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
        #nodePort:

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        #appProtocol:
ingress:
  main:
    # -- Enables or disables the ingress
    enabled: false

    # -- Override the name suffix that is used for this ingress.
    #nameOverride:

    # -- Provide additional annotations which may be required. Helm templates can be used.
    annotations: { }

    # -- Provide additional labels which may be required. Helm templates can be used.
    #labels: {}

    # -- Set the ingressClass that is used for this ingress.
    #className:

    # -- Configure the defaultBackend for this ingress. This will disable any other rules for the ingress.
    #defaultBackend:

    ## Configure the hosts for the ingress
    hosts:
      - # -- Host address. Helm template can be passed.
        host: restic-exporter.local
        ## Configure the paths for the host
        paths:
          - # -- Path.  Helm template can be passed.
            path: /
            service:
              identifier: main
    # -- Configure TLS for the ingress. Both secretName and hosts can process a Helm template.
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
